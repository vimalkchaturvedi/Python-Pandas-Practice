#Load the excel and csv files and join them.


import pandas as pd
import numpy as np


def answer_one():
    energy = pd.read_excel('assets/Energy Indicators.xls', header=None, footer=None, skiprows=18,skip_footer=(38))
    
    energy = energy[[1,3,4,5]]
    energy.columns = ['Country', 'Energy Supply', 'Energy Supply per Capita', '% Renewable']
    

    #energy[['Energy Supply', 'Energy Supply per Capita', '% Renewable']] =  energy[['Energy Supply', 'Energy Supply per Capita', '% Renewable']].replace('...',np.NaN).apply(pd.to_numeric)
    energy.replace('...',np.NaN, inplace=True)
    
    energy['Energy Supply'] = 1000000*energy['Energy Supply']
    
    energy['Country'] = energy['Country'].replace({'China, Hong Kong Special Administrative Region':'Hong Kong','United Kingdom of Great Britain and Northern Ireland':'United Kingdom','Republic of Korea':'South Korea','United States of America':'United States','Iran (Islamic Republic of)':'Iran'})
    energy['Country'] = energy['Country'].replace(to_replace = '\(.*\)', value = '', regex=True)
    energy['Country'] = energy['Country'].replace(to_replace = '[0-9]*', value = '', regex=True)
    
    GDP = pd.read_csv('assets/world_bank.csv',skiprows=4)
    GDP['Country Name'] = GDP['Country Name'].replace({'Korea, Rep.':'South Korea','Iran, Islamic Rep.':'Iran','Hong Kong SAR, China':'Hong Kong'})
    GDP = GDP[['Country Name','2006','2007','2008','2009','2010','2011','2012','2013','2014','2015']]
    GDP.columns = ['Country','2006','2007','2008','2009','2010','2011','2012','2013','2014','2015']

    ScimEn = pd.read_excel('assets/scimagojr-3.xlsx')
    ScimEn = ScimEn[ScimEn['Rank'].lt(16)]
    df = pd.merge(ScimEn,energy,how='inner',left_on='Country',right_on='Country')
    new_df = pd.merge(df,GDP,how='inner',left_on='Country',right_on='Country')
    new_df = new_df.set_index('Country')
    return new_df


#Average of GDP across 10 columns

def answer_three():
    import pandas as pd
    Top15 = answer_one()
    
    Top15 = Top15[['2006','2007','2008','2009','2010','2011','2012','2013','2014','2015'] ]
    # Only include the years for columns
    avgGDP = Top15.mean(axis=1)
    return avgGDP.sort_values(ascending=False)
    


answer_three()



#By how much had the GDP changed over the 10 year span for the country with the 6th largest average GDP?

def answer_four():
    import pandas as pd
    
    AvgGDP = answer_three()
    AvgGDP_df = pd.DataFrame(AvgGDP)
    AvgGDP_df['AvgGDPRank'] = [i for i in range(15)]
    AvgGDP_df['Cont'] = AvgGDP_df.index
    GDP6th = AvgGDP_df[AvgGDP_df['AvgGDPRank'] == 5]['Cont'][0]
    #print(GDP6th)
    Top15 = answer_one()
    #print(Top15[Top15.index ==GDP6th ]['2015'])
    answer_four = Top15[Top15.index ==GDP6th ]['2015'] -Top15[Top15.index == GDP6th]['2006']
    return pd.to_numeric(answer_four[0])


#What country has the maximum % Renewable and what is the percentage?
#This function should return a tuple with the name of the country and the percentage.

def answer_six():
   
    energy = answer_one()
    
    return (energy[ energy['% Renewable'] == energy['% Renewable'].max()].index[0] , energy['% Renewable'].max()  )
    
answer_six()





#Create a column that estimates the population using Energy Supply and Energy Supply per capita. What is the third most populous country according to this estimate?
#This function should return the name of the country


def answer_eight():
    energy = answer_one()
    
    energy['population'] = energy['Energy Supply'] /energy['Energy Supply per Capita']
    max_energy_population =  energy.sort_values(by= ['population'], ascending = False).ix[2]
    return  max_energy_population.name 

answer_eight()





#Create a column that estimates the number of citable documents per person. What is the correlation between the number of citable documents per capita and the energy supply per capita? Use the .corr() method, (Pearson's correlation).

#This function should return a single number.

#(Optional: Use the built-in function plot9() to visualize the relationship between Energy Supply per Capita vs. Citable docs per Capita)


def answer_nine():
    df = answer_one()
    df['population']=df['Energy Supply']/df['Energy Supply per Capita']
    df['citable documents per person']=df['Citable documents']/df['population']
    df['citable documents per person']=np.float64(df['citable documents per person'])
    relation = df['citable documents per person'].corr(df['Energy Supply per Capita'])
    return(relation)

answer_nine()



#Create a new column with a 1 if the country's % Renewable value is at or above the median for all countries in the top 15, and a 0 if the country's % Renewable value is below the median.

#This function should return a series named HighRenew whose index is the country name sorted in ascending order of rank.


def answer_ten():
    df = answer_one()
    renewable_mean = df['% Renewable'].median()       
    def function(x):
        if x>=renewable_mean:
            return 1
        else:
            return 0
    df['HighRenew']=df['% Renewable'].map(lambda x:1 if x>=renewable_mean else 0)
    #df['HighRenew']=df['% Renewable'].map(function)
    df.sort_index(by='Rank',ascending = True)
    return(df['HighRenew'])

answer_ten()